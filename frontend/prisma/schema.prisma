generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PluginCategory {
  id                    Int      @id @default(autoincrement())
  name                  String
  description           String
  backgroundColor       String
  textColor             String
  buttonBackgroundColor String
  buttonTextColor       String
  Plugin                Plugin[]
}

model PluginReview {
  id       Int     @id @default(autoincrement())
  text     String
  rating   Int
  reviewer String
  Plugin   Plugin? @relation(fields: [pluginId], references: [id])
  pluginId Int?
}

model Chain {
  id          String        @id
  name        String
  chainId     Int
  shortName   String
  icon        String
  Plugin      Plugin[]
  SmartWallet SmartWallet[]
}

model PluginCode {
  id      Int      @id @default(autoincrement())
  name    String
  url     String
  version String
  content String
  Plugin  Plugin[]
}

model PluginConfigRequirement {
  id          Int     @id @default(autoincrement())
  name        String
  placeholder String?
  type        String
  options     Json?
  Plugin      Plugin  @relation(fields: [pluginId], references: [id])
  pluginId    Int
}

model Plugin {
  id                      Int                       @id @default(autoincrement())
  name                    String
  description             String
  oneLiner                String
  version                 String
  icon                    String
  creator                 String
  category                PluginCategory            @relation(fields: [pluginCategoryId], references: [id])
  rating                  Int
  ratingAmount            Int
  audits                  Int
  usage                   Int                       @default(0)
  contractAddress         String
  chains                  Chain[]
  tippingAddress          String
  reviews                 PluginReview[]
  code                    PluginCode                @relation(fields: [pluginCodeId], references: [id])
  pluginCategoryId        Int
  pluginCodeId            Int
  PluginConfigRequirement PluginConfigRequirement[]
  ImplementedPlugin       ImplementedPlugin[]
}

model ImplementedPlugin {
  id                 Int          @id @default(autoincrement())
  Plugin             Plugin       @relation(fields: [pluginId], references: [id])
  pluginId           Int
  config             Json
  SmartWallet        SmartWallet? @relation(fields: [smartWalletAddress], references: [address])
  smartWalletAddress String?
}

model SmartWallet {
  address  String              @id
  deployed Boolean
  chains   Chain[]
  User     User?               @relation(fields: [userId], references: [id])
  userId   String?
  plugins  ImplementedPlugin[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wallets       SmartWallet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
